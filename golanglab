package main

import (
	"fmt"
	"os"
)


type Task struct {
	Description string
	Completed   bool
}


var toDoList []Task


func addTask(description string) {
	task := Task{Description: description, Completed: false}
	toDoList = append(toDoList, task)
	fmt.Println("Task added:", description)
}


func viewTasks() {
	if len(toDoList) == 0 {
		fmt.Println("No tasks to show.")
		return
	}
	for i, task := range toDoList {
		status := "Pending"
		if task.Completed {
			status = "Completed"
		}
		fmt.Printf("%d. %s [%s]\n", i+1, task.Description, status)
	}
}


func deleteTask(index int) {
	if index < 0 || index >= len(toDoList) {
		fmt.Println("Invalid task number.")
		return
	}
	toDoList = append(toDoList[:index], toDoList[index+1:]...)
	fmt.Println("Task deleted.")
}


func markAsCompleted(index int) {
	if index < 0 || index >= len(toDoList) {
		fmt.Println("Invalid task number.")
		return
	}
	toDoList[index].Completed = true
	fmt.Println("Task marked as completed.")
}

func main() {
	for {
		
		fmt.Println("\nTo-Do List Application")
		fmt.Println("1. Add Task")
		fmt.Println("2. View Tasks")
		fmt.Println("3. Delete Task")
		fmt.Println("4. Mark Task as Completed")
		fmt.Println("5. Exit")
		fmt.Print("Choose an option: ")

		
		var choice int
		_, err := fmt.Scanln(&choice)
		if err != nil {
			fmt.Println("Invalid input. Please try again.")
			continue
		}

		
		switch choice {
		case 1:
			
			fmt.Print("Enter task description: ")
			var description string
			fmt.Scanln(&description)
			addTask(description)
		case 2:
			
			viewTasks()
		case 3:
			
			fmt.Print("Enter task number to delete: ")
			var taskNumber int
			fmt.Scanln(&taskNumber)
			deleteTask(taskNumber - 1) 
		case 4:
			
			fmt.Print("Enter task number to mark as completed: ")
			var taskNumber int
			fmt.Scanln(&taskNumber)
			markAsCompleted(taskNumber - 1) 
		case 5:
			
			fmt.Println("Goodbye!")
			os.Exit(0)
		default:
			fmt.Println("Invalid option. Please try again.")
		}
	}
}
